============================
``1-my_list`` module
============================

``1-my_list`` prints the list in ascending sort.

Import function from module:
        >>> MyList = __import__('1-my_list').MyList


Check class docstring:
        >>> MyList.__doc__ != None
        True

Adding elements in the list:
        >>> my_list = MyList()
        >>> my_list.append(1)
        >>> my_list.append(4)
        >>> my_list.append(2)
        >>> my_list.append(3)
        >>> my_list.append(5)

Print the list:
        >>> print(my_list)
        [1, 4, 2, 3, 5]

Print the list sorted:
        >>> my_list.print_sorted()
        [1, 2, 3, 4, 5]

Add a negative integer and print sorted:
        >>> my_list.append(-1)
        >>> my_list.print_sorted()
        [-1, 1, 2, 3, 4, 5]

A sorted list, print and printing with the method:
        >>> my_list = MyList([4, 6, 9, 8])
        >>> print(my_list)
        [4, 6, 9, 8]
        >>> my_list.print_sorted()
        [4, 6, 8, 9]

An empty list:
        >>> my_list = MyList()
        >>> print(my_list)
        []
        >>> my_list.print_sorted()
        []

Append two elements and print with the method:
        >>> my_list = MyList()
        >>> my_list.append(5)
        >>> my_list.append(4)
        >>> my_list.print_sorted()
        [4, 5]

Declaring a list but not instance from the class:
        >>> my_list = [4, 2, 3]
        >>> my_list.print_sorted()
        Traceback (most recent call last):
                ...
        AttributeError: 'list' object has no attribute 'print_sorted'

Append an element that is not an integer:
        >>> my_list = MyList()
        >>> my_list.append(4)
        >>> my_list.append("Holberton")
        >>> my_list.print_sorted()
        Traceback (most recent call last):
                ...
        TypeError: unorderable types: str() < int()

Giving only one negative element:
        >>> my_list = MyList()
        >>> my_list.append(-2)
        >>> my_list.print_sorted()
        [-2]

Module docstring:
	>>> m_doc = __import__('1-my_list').__doc__
	>>> len(m_doc) > 1
	True

Class docstring:
	>>> c_doc = __import__('1-my_list').MyList.__doc__
        >>> len(c_doc) > 1
        True
 
Method docstring:
        >>> m_doc = __import__('1-my_list').MyList.print_sorted.__doc__
        >>> len(m_doc) > 1
        True
